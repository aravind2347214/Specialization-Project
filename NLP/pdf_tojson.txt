import pdfplumber
import json
import re

def extract_text_from_pdf(pdf_path):
    """
    Extracts text from a PDF file.
    
    Parameters:
    pdf_path (str): Path to the PDF file.
    
    Returns:
    str: Extracted text from the PDF.
    """
    text = ""
    try:
        with pdfplumber.open(pdf_path) as pdf:
            for page in pdf.pages:
                page_text = page.extract_text()
                if page_text:
                    text += page_text
    except Exception as e:
        print(f"An error occurred while extracting text: {e}")
    return text

def extract_details(text):
    """
    Extracts specific details from the text using regex.
    
    Parameters:
    text (str): Text extracted from the PDF.
    
    Returns:
    dict: Dictionary with extracted details.
    """
    details = {
        "Bilirubin": None,
        "Albumin": None,
        "Triglycerides": None,
        "Prothrombin": None,
        "Copper": None,
        "Platelet Count": None,
        "SGOT": None,
        "Alkaline Phosphatase (ALP)": None
    }
    patterns = {
        "Bilirubin": r"Bilirubin(?:\s*,?\s*Total)?\s*[:\-\s]*([\d\.]+)",
        "Albumin": r"Albumin\s*[:\-\s]*([\d\.]+)",
        "Triglycerides": r"Triglycerides\s*[:\-\s]*([\d\.]+)",
        "Prothrombin": r"Prothrombin\s*[:\-\s]*([\d\.]+)",
        "Copper": r"Copper\s*[:\-\s]*([\d\.]+)",
        "Platelet Count": r"Platelet Count\s*[:\-\s]*([\d\.]+)",
        "SGOT": r"(SGOT|AST|ASPARTATE\s*AMINOTRANSFERASE)\s*[:\-\s]*([\d\.]+)",
        "Alkaline Phosphatase (ALP)": r"(Alkaline\s*Phosphatase\s*(?:\(ALP\))?)\s*[:\-\s]*([\d\.]+)"
    }
    
    for key, pattern in patterns.items():
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            if key == "SGOT":
                details[key] = match.group(2) if match.group(2) else match.group(1)
            else:
                details[key] = match.group(2) if key == "Alkaline Phosphatase (ALP)" and match.group(2) else match.group(1)
        else:
            print(f"No match found for {key}.")  # Debug print

    return details

def save_to_json(data, output_path):
    """
    Saves data to a JSON file.
    
    Parameters:
    data (dict): Data to save.
    output_path (str): Path to the output JSON file.
    """
    try:
        with open(output_path, 'w', encoding='utf-8') as json_file:
            json.dump(data, json_file, indent=4, ensure_ascii=False)
        print(f"Data successfully saved to {output_path}")
    except Exception as e:
        print(f"An error occurred while saving to JSON: {e}")

# Path to your PDF file
pdf_path = r'WM17S.pdf'

# Extract text from the PDF
text = extract_text_from_pdf(pdf_path)

# Debug: Print extracted text to verify content
print(text[:1000])  # Print first 1000 characters for inspection

# Extract specific details
details = extract_details(text)

# Path to the output JSON file
output_json_path = r'D:\Sproj\output.json'

# Save extracted details to JSON
save_to_json(details, output_json_path)